import java.math.BigInteger;
import java.security.AlgorithmParameters;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECGenParameterSpec;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Base64;


/**
 * @author Mads
 *
 */
public class KeyByteConverter
{
	//constants
	private static final String ALGORITHM = "secp256r1";
	private static final String PUBLIC_KEY_STRING = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEzE+hdo2yNcabsKKdgImuq8ftBJIW"
			+ "CuOZbrKw7oR0bow0DkZ7B6qKSdKBc6Gnkkl8my0nzSiQzB4Jzl1a5nl0oA==";
	
	/** check to see if the key generated directly from the public key string and the key generated by converting
	 * the key to a byte array and back are equal	 */
	public static void main(String[] args) throws GeneralSecurityException
	{
		 ArrayList<byte[]> rawPublicKey = getRawPublicKey(PUBLIC_KEY_STRING);
		 ECPublicKey publicKeyTwo = convertBytesToPublicKey(rawPublicKey);
		 ECPublicKey publicKeyOne = (ECPublicKey) extractPublicKey(PUBLIC_KEY_STRING);
		 
		 if (publicKeyOne.equals(publicKeyTwo))
			 System.out.println("Keys are equal, methods work correctly");
		 else
			 System.out.println("Keys are not equal. There is an issue with conversion"); 		       
	}
	
	
	/**Converts the encodedPublicKey into a byte array
	 * 
	 * @param encodedPublickey the encoded ECPublicKey
	 * @return xyPair an ArrayList wherein xyPair.get(0) is the byte array corresponding to the x value, and
	 * 	xyPair.get(1) is the byte array corresponding to the y value.
	 */
	public static ArrayList<byte[]> getRawPublicKey(String encodedPublicKey) throws GeneralSecurityException {

        ECPublicKey publicKey = (ECPublicKey)extractPublicKey(encodedPublicKey);
        ECPoint w = publicKey.getW();
        BigInteger xVal = w.getAffineX();
        BigInteger yVal = w.getAffineY();
        
        byte[] xValBytes = xVal.toByteArray();
        byte[] yValBytes = yVal.toByteArray();
        
        ArrayList<byte[]> xyPair = new ArrayList<byte[]>();
        xyPair.add(xValBytes);
        xyPair.add(yValBytes);
        
        return xyPair;
    }
	
	/**Converts a byte array to an encoded Public Key
	 * 
	 * @param xyPair the raw public key, wherein xyPair.get(0) is the byte array corresponding to the x value, and
	 * 	xyPair.get(1) is the byte array corresponding to the y value.
	 * @return key the encoded public key
	 */
	public static ECPublicKey convertBytesToPublicKey(ArrayList<byte[]> xyPair) throws GeneralSecurityException {
		//convert to get x and y values
		byte[] xValBytes = xyPair.get(0);
        byte[] yValBytes = xyPair.get(1);
        BigInteger x = new BigInteger(xValBytes);
        BigInteger y = new BigInteger(yValBytes);
        
        ECPoint w = new ECPoint(x, y);
        
        AlgorithmParameters parameters = AlgorithmParameters.getInstance("EC", "SunEC");
        parameters.init(new ECGenParameterSpec(ALGORITHM));
        ECParameterSpec ecParameters = parameters.getParameterSpec(ECParameterSpec.class);
        ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(w, ecParameters);
        KeyFactory kf = KeyFactory.getInstance("EC");
        ECPublicKey key = (ECPublicKey)kf.generatePublic(pubKeySpec);
        
        return key;
    }
	
    /**
     * creates a public key from a given string
     *
     * @param publicKeyString the string equal to the encoded public key
     * @return publicKey the converted public key
     */
    private static PublicKey extractPublicKey(String publicKeyString) throws GeneralSecurityException {
        byte[] rawArray = Base64.getDecoder().decode(publicKeyString);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(rawArray);
        KeyFactory factory = KeyFactory.getInstance("EC");
        PublicKey publicKey = factory.generatePublic(spec);
        return publicKey;
    }
}
